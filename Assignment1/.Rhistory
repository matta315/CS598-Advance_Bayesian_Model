getwd()
data <- read.table("randomwikipedia.txt", header=True)
data <- read.table("randomwikipedia.txt")
head(data)
data <- read.table("randomwikipedia.txt",header=TRUE)
hist(data$bytes, 
     main = "Histogram of Wikipedia Article Lengths",
     xlab = "Article Length (bytes)",
     ylab = "Frequency")
hist(log(data$bytes),
     main = "Histogram of Log-Transformed Article Lengths",
     xlab = "Log Article Length (log bytes)",
     ylab = "Frequency")
y <- log(data$bytes)
#output
cat("Mean:", mean(y), "bytes\n")
cat("variance:", var(y), "bytes\n")
y <- log(data$bytes)
n <- length(y) #size
y_bar <- mean(y) #mean
sigma2 <- var(y) #variance
post_mean <- y_bar
post_variance <- sigma2/2
post_precision <- 1/post_variance
cat("Posterior_Mean:", post_mean, "bytes\n")
cat("Posterior_Variance:", post_variance, "bytes\n")
cat("Posterior_Precision:", post_precision, "bytes\n")
qnorm(0.975)
post_sd = sqrt(post_variance)
post_sd
rep(1/diff(range(x_vals)),length(x_vals))
x_vals <- seq(posterior_mean - 3*post_sd, posterior_mean + 3*post_sd, length.out = 1000)
x_vals <- seq(post_mean - 3*post_sd, post_mean + 3*post_sd, length.out = 1000)
rep(1/diff(range(x_vals)),length(x_vals))
(1/diff(range(x_vals)),length(x_vals)
1/diff(range(x_vals))
# SD
post_sd = sqrt(post_variance)
# Generate X values for density
x_vals <- seq(post_mean - 3*post_sd, post_mean + 3*post_sd, length.out = 1000)
# Calculate density
prior_density <- rep(1/diff(range(x_vals)),length(x_vals))
post_density <- dnorm(x_vals, mean = post_mean, sd = post_sd)
plot(x_vals,post_density,
    type = 'l',
    col = "blue",
    xlab = "Î¼",
    ylab = "Density",
    main = "Prior and Posterial Distribution of Wiki Data")
# Add Flat prior
abline(h = prior_density, col = "red", lwd = 2)
# Utility Function for posterior Interval
calculate_posterior_interval <- function(post_mean, post_sd, conf_level = 0.95) {
    # Calculate alpha for the confidence level
    alpha <- (1 - conf_level) / 2
    
    # Calculate the lower and upper bounds
    lower_bound <- qnorm(alpha, mean = post_mean, sd = post_sd)
    upper_bound <- qnorm(1 - alpha, mean = post_mean, sd = post_sd)
    
    return(c(lower = lower_bound, upper = upper_bound))
}
# Output
interval <- calculate_posterior_interval(post_mean, post_sd)
cat("95% Central Posterior Interval:", "\n")
cat("Lower bound:", round(interval[1], 4), "\n")
cat("Upper bound:", round(interval[2], 4), "\n")
quit()
